@name Strikes
@persist [EntName,TargetName]:string 
@persist NumBombs Use Reload
@persist StrikeTime
@persist Strikes:table
@persist Interval Index SoundHolos
@persist StartingHoloXY StartingHoloScale:vector
@persist StartingHoloHeight
@persist StickyTargets StickyTarget:entity
@persist AimEnt:entity

if(first())
{
    EntName = "m9k_ammo_rockets"
    NumBombs = 1
    Index = 2
    StickyTargets = 1
    
    Interval = 15
    
    StrikeTime = 10
    
    StartingHoloXY = 500
    StartingHoloHeight = 500
    StartingHoloScale = vec(StartingHoloXY, StartingHoloXY, 5)
    
    SoundHolos = 5
    Strikes = table()
    
    TargetName = ""
    
    function void removeHolos(I:number)
    {
        holoDelete(I)
        holoDelete(I + 10)
    }
    
    function void startAlarm(Index:number, P:vector, E:entity)
    {
        # We're going to create multiple holos to play this sound louder
        # However, we need to make sure we're not colliding with other holo/sound indexes
        
        for(I=50, 50+(SoundHolos*10), 10)
        {
            local RandOffset = randvec(vec(-200), vec(200))
            local OffsetPos = P + RandOffset
            local AdjustedIndex = Index + I
            
            holoCreate(AdjustedIndex, OffsetPos)
            holoVisible(AdjustedIndex, players(), 0)
            
            local PlayEnt = holoEntity(AdjustedIndex)
            if(E:isPlayer())
            {
                holoParent(AdjustedIndex, E)
            }

            PlayEnt:soundPlay(AdjustedIndex, 0, "ambient/alarms/combine_bank_alarm_loop1.wav")
            soundPitch(AdjustedIndex, 255)
            soundVolume(AdjustedIndex, 999999)
        }
    }

    function void createHolo(T:table)
    {
        local Pos = T["Pos", vector]
        
        local EntityAttached = T["IsEntity", number]
        local SoundPlayEnt = noentity()

        # Create moving circle
        holoCreate(Index, Pos)
        holoModel(Index, "hq_torus_thin")
        holoColor(Index, vec(255, 0, 0))
        holoShadow(Index, 0)
        holoDisableShading(Index, 1)
        holoScaleUnits(Index, StartingHoloScale)
        
        # Create solid outer circle
        local OuterIndex = Index + 10
        holoCreate(OuterIndex, Pos)
        holoModel(OuterIndex, "hq_cylinder")
        holoColor(OuterIndex, vec(255, 0, 0))
        holoAlpha(OuterIndex, 127)
        holoShadow(OuterIndex, 0)
        holoDisableShading(OuterIndex, 1)
        holoScaleUnits(OuterIndex, StartingHoloScale)
        
        #[ Create cylindar
        local UpperIndex = Index + 20
        holoCreate(UpperIndex, Pos + vec(0, 0, 250))
        holoModel(UpperIndex, "hq_cylinder")
        holoColor(UpperIndex, vec(0))
        holoShadow(UpperIndex, 0)
        holoDisableShading(UpperIndex, 1)
        holoScaleUnits(UpperIndex, vec(50, 50, 100))
        ]#
        
        if(EntityAttached == 1)
        {
            local AttachedEntity = T["Entity", entity]
            holoPos(Index, AttachedEntity:pos())
            holoParent(Index, AttachedEntity)
            
            holoPos(OuterIndex, AttachedEntity:pos())
            holoParent(OuterIndex, AttachedEntity)
            
            #holoPos(UpperIndex, AttachedEntity:pos())
            #holoParent(UpperIndex, AttachedEntity)
            
            SoundPlayEnt = AttachedEntity
        }

        holoEntity(Index):soundPlay(randint(8888,9999), 3, "ambient/alarms/perimeter_alarm.wav")
        startAlarm(Index, Pos, SoundPlayEnt)
    }
    
    function void adjustHolo(I:number, T:number)
    {
        local TimeDiff = realtime() - T
        
        local Div = TimeDiff / StrikeTime
        local ScaleFactor = 1 - Div
        
        # For inner circle
        local Resize = StartingHoloScale * vec(ScaleFactor, ScaleFactor, 1)
        holoScaleUnits(I, Resize)    
    }
    
    function void doBoom(P:vector, E:entity)
    {
        local Pos = P
        if(E:isPlayer())
        {Pos = E:pos()}
        
        for(I=1, NumBombs)
        {
            entSpawn(EntName):setPos(Pos)
        }
        Boom = propSpawn("models/props_c17/oildrum001_explosive.mdl", 1)
        Boom:setPos(Pos)
        Boom:propBreak()
    }
    
    function void checkStrikes()
    {
        for(I=1, Strikes:count())
        {
            local Strike = Strikes[I, table]
            local StrikeIndex = Strike["Index", number]
            local StrikePos = Strike["Pos", vector]
            local StrikeInitTime = Strike["InitTime", number]
            local StrikeEntity = Strike["Entity", entity]
            
            local Time = realtime()
            local Diff = Time - StrikeInitTime
            
            adjustHolo(StrikeIndex, StrikeInitTime)
            
            if(Diff >= StrikeTime)
            {
                print("Boom")
                doBoom(StrikePos, StrikeEntity)
                removeHolos(StrikeIndex)
                soundPurge()
                Strikes:removeTable(I)
            }
        }
    }
    
    function table createStructForPos(Pos:vector)
    {
        local Struct = table("Index" = Index,
                     "Pos" = Pos,
                     "InitTime" = realtime(),
                     "IsEntity" = 0,
                     "Entity" = noentity())
        return Struct
    }
    
    function table createStructForTarget(Target:entity)
    {
        local Struct = table("Index" = Index,
                     "Pos" = vec(0),
                     "InitTime" = realtime(),
                     "IsEntity" = 1,
                     "Entity" = Target)
        return Struct
    }
        
    function void createStrikeFromData(StrikeData:table)
    {
        Strikes:pushTable(StrikeData)
        createHolo(StrikeData)
        Index = Index + 1
    }
    
    function array randomHalfPlayers()
    {
        local Half = array()
        local Players = players()
        
        for(I=1, players():count()/2)
        {
            local RandIndex = randint(1, Players:count())
            local RandPlayer = Players[RandIndex, entity]
            
            Half:pushEntity(RandPlayer)
            Players:remove(RandIndex)
        }
        
        return Half
    }
    #foreach(K,E:entity = randomHalfPlayers())
    #{
    #    local StrikeStruct = createStructForTarget(E)
    #    createStrikeFromData(StrikeStruct)
    #}
        

}
Use = owner():keyUse()
Reload = owner():keyReload()

if($Reload == 1)
{
    for(I=1, Strikes:count())
    {
        local Strike = Strikes[I, table]
        local StrikeIndex = Strike["Index", number]
        
        removeHolos(StrikeIndex)
        Strikes:removeTable(I)
    }
    soundPurge()
}

if($Use == 1)
{   
    local AimingAt = owner():aimEntity()
    if(StickyTargets)
    {AimingAt = StickyTarget}
    
    local AimPos = owner():aimPos()
    local Struct = table()
    
    if(AimingAt:isPlayer())
    {Struct = createStructForTarget(AimingAt)}
    else{Struct = createStructForPos(AimPos)}
    
    createStrikeFromData(Struct)
    
}

local AimEnt = owner():aimEntity()

if(changed(AimEnt))
{
    if(AimEnt:isPlayer())
    {
        hint("New Target: " + AimEnt:name(), 500)
        StickyTarget = AimEnt
    }
}


checkStrikes()
interval(Interval)
