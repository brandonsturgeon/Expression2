@name Executioner
@persist [Beacon,RunTimer]:number
@persist [Target]:entity
@persist [ReturnPos]:vector

if(first())
{
    Beacon = 1
    RunTimer = 1
    Target = noentity()
    ReturnPos = owner():pos()
    
    holoCreate(Beacon)
    holoModel(Beacon, "hq_cylinder")
    holoScaleUnits(Beacon, vec(100,100,200))
    holoColor(Beacon, vec(255,0,0))
    holoAlpha(Beacon, 127)
    holoVisible(Beacon, players(), 0)
    holoVisible(Beacon, owner(), 1)
    
    function void moveBeacon(Ent:entity)
    {
        holoPos(Beacon, Ent:pos() + vec(0,0,100))
        holoParent(Beacon, Ent)
    }
        
    function vector getBehindEnt(Ent:entity)
    {
        print(Ent:name())
        return Ent:pos() + (-Ent:forward()*100)
    }
    
    function array checkPlayers()
    {
        ToKill = array()
        foreach(K, Ply:entity = players())
        {
            if(Ply:health() < 20 & (Ply:health() > 0))
            {
                ToKill:pushEntity(Ply)
            }
        }
        
        return ToKill
    }
}

if(RunTimer >= 100)
{
    local NearDeath = checkPlayers()
    if(NearDeath:count() > 0)
    {
        Target = NearDeath[1, entity]
        local Goto = getBehindEnt(Target)
        moveBeacon(Target)
        
        if(owner():health() > 40)
        {
            owner():teleport(Goto)
        }
    }
    
    RunTimer = 1
}
RunTimer += 1

if(Target != noentity())
{
    if(owner():health() < 40 && RunTimer > 0)
    {
        owner():teleport(ReturnPos)
        RunTimer -= 400
        hint("10 second delay begins now", 10)
    }
    
    if(!Target:isAlive())
    {
        Target = noentity()
        owner():teleport(ReturnPos)
        moveBeacon(entity())
    }
}

interval(1)

